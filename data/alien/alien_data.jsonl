{"instance_id": "5", "selected_database": "alien", "query": "Show me a breakdown of signal modulation types with at least 5 occurrences. For each modulation type, display the modulation type, the number of signals, the average Modulation Complexity Score (MCS), and average signal-to-noise ratio (SNR). Also include a detailed JSON with each signal's MCS and SNR values. Keys are the signal record IDs, and values are inner objects containing two fields: `mcs` – the signal’s MCS value, and `snr` – the SNR value.", "preprocess_sql": [], "clean_up_sqls": [], "sol_sql": ["/*\nIntent: Evaluate effectiveness of different modulation types\nKnowledge Used: MCS (id:30)\nAdvanced Features: JSON functions, advanced aggregation\n*/\nSELECT \n    s.ModType,\n    COUNT(*) AS signal_count,\n    AVG(s.ModIndex * (1 + (1 - ABS(s.FreqDriftHzs)/(s.FreqMhz*1000)) * \n        s.SigDurSec/(1 + s.DoppShiftHz/1000)) *\n        CASE \n            WHEN s.ModType = 'AM' THEN 2\n            WHEN s.ModType = 'FM' THEN 1.5\n            ELSE 1\n        END) AS avg_mcs,\n    AVG(s.SnrRatio) AS avg_snr,\n    JSON_OBJECT_AGG(\n        s.SignalRegistry,\n        JSON_BUILD_OBJECT(\n            'mcs', s.ModIndex * (1 + (1 - ABS(s.FreqDriftHzs)/(s.FreqMhz*1000)) * \n                   s.SigDurSec/(1 + s.DoppShiftHz/1000)) *\n                   CASE \n                       WHEN s.ModType = 'AM' THEN 2\n                       WHEN s.ModType = 'FM' THEN 1.5\n                       ELSE 1\n                   END,\n            'snr', s.SnrRatio\n        )\n    ) AS signal_details\nFROM Signals s\nWHERE s.ModType IS NOT NULL\nGROUP BY s.ModType\nHAVING COUNT(*) > 5;"], "external_knowledge": [30], "test_cases": [], "category": "Query", "high_level": true, "conditions": {"decimal": -1, "distinct": false}}
{"instance_id": "M_1", "selected_database": "alien", "query": "Create a PostgreSQL function called 'calculate_disf' that computes the Detection Instrument Sensitivity Factor (DISF) and return the calculated value.", "preprocess_sql": [], "clean_up_sqls": [], "sol_sql": ["-- Create a function to calculate Detection Instrument Sensitivity Factor (DISF).\n-- Intent: Define a function that computes DISF using telescope environmental data and then test it.\n-- Step 1: Create the function \"calculate_disf\" using PL/pgSQL.\n--         Inputs: AirTempC, AtmosTransparency, HumidityRate, LunarDistDeg.\n--         Calculation: DISF = (10 - |AirTempC - 15|/10) * AtmosTransparency * (1 - HumidityRate/200) * ((100 - LunarDistDeg)/100)\n-- Knowledge Used:\n--   \"Detection Instrument Sensitivity Factor (DISF)\" [KB id:5] and advanced procedural language features.\nCREATE OR REPLACE FUNCTION calculate_disf(\n    p_airtemp NUMERIC, \n    p_trans NUMERIC, \n    p_humidity NUMERIC, \n    p_lunar_deg NUMERIC\n) RETURNS NUMERIC AS $$\nDECLARE\n    v_disf NUMERIC;\nBEGIN\n    -- Calculate the DISF based on the given formula.\n    v_disf := (10 - ABS(p_airtemp - 15)/10) * p_trans * (1 - p_humidity/200) * ((100 - p_lunar_deg)/100);\n    RETURN v_disf;\nEND;\n$$ LANGUAGE plpgsql;\n"], "external_knowledge": [5], "test_cases": ["\ndef test_case(pred_sqls, sol_sqls, db_name, conn):\n    # The expected DISF value computed for inputs: AirTempC = 20, p_trans = 0.95, p_humidity = 45, p_lunar_deg = 60.\n    # Calculation:\n    #   factor1 = 10 - ABS(20 - 15)/10 = 10 - 5/10 = 10 - 0.5 = 9.5\n    #   factor2 = 0.95\n    #   factor3 = 1 - 45/200 = 1 - 0.225 = 0.775\n    #   factor4 = (100 - 60)/100 = 40/100 = 0.4\n    # Expected DISF = 9.5 * 0.95 * 0.775 * 0.4 ≈ 2.79775\n    expected_disf = 2.79775\n    tolerance = 0.00001  # Allowable floating-point error\n    \n    # Execute a SELECT to call calculate_disf with given parameters.\n    pred_result, _, _ = execute_queries(\"SELECT calculate_disf(20, 0.95, 45, 60);\", db_name, conn)\n    # Expecting pred_result to be a list with one tuple containing the computed value.\n    predicted_value = float(pred_result[0][0])\n    \n    # Step 3: Assert that the predicted value matches the expected DISF.\n    assert abs(predicted_value - expected_disf) < tolerance, (\n        f\"Predicted DISF value {predicted_value} differs from expected {expected_disf}\"\n    )\n    "], "category": "Management", "high_level": false, "conditions": {"decimal": -1, "distinct": false}}
